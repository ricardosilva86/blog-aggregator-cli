// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(id, feed_id, title, url, description, published_at, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, description, url, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	ID          uuid.UUID
	FeedID      uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsForFeedOfUser = `-- name: GetPostsForFeedOfUser :many
SELECT posts.id,
       posts.title,
       posts.url,
       posts.description,
       posts.published_at,
       feeds.id as feedId,
       feeds.name as feedName
FROM public.posts
INNER JOIN feeds ON feeds.id = posts.feed_id
WHERE (select feed_follows.feed_id from feed_follows where feed_follows.feed_id = posts.feed_id) = $1
AND (select feed_follows.user_id from feed_follows where feed_follows.user_id = $2) = $2
`

type GetPostsForFeedOfUserParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

type GetPostsForFeedOfUserRow struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	Feedid      uuid.UUID
	Feedname    string
}

func (q *Queries) GetPostsForFeedOfUser(ctx context.Context, arg GetPostsForFeedOfUserParams) ([]GetPostsForFeedOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeedOfUser, arg.FeedID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedOfUserRow
	for rows.Next() {
		var i GetPostsForFeedOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.Feedid,
			&i.Feedname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
